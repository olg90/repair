import numpy as np
from matplotlib.pyplot import plot as pt
import matplotlib.pyplot as plt
from numpy.random import exponential, binomial, gamma
from collections import deque

def simulate(f, pr, M, n, r, z, k, kr, gammaz, cz, tmax, delta_t):

        nlist=[]
        zlist=[]
        rlist=[]

        tlist=[]
        APlist=[]

        tcurr=0
        
        ratio = 0
        timer = delta_t
        
        shape=kr*r+1e-6
        scale=10
        gammatimer=gamma(shape, scale) # repair a site
        print(gammatimer)
        
        while tcurr < tmax:

            t0=exponential(1/f) # action potential
            t1=exponential(1/(k*(M-n-r) + 1e-6)) # site gets occupied
            t2=exponential(1/(gammaz*z + 1e-6)) # remove neurotransmitter
            t3=gammatimer
            t4 = timer
            
# =============================================================================
#             print([t0,t1,t2,t3,t4])
# =============================================================================

            if t0 < t1 and t0 < t2 and t0 < t3 and t0 < t4: # AP occurrs
                b = binomial(n, pr)
                n = n - b
                r = r + b
                z = z + cz*b
                APlist.append(tcurr+t0)
                tmin = t0
                timer-=tmin
                gammatimer-=tmin


            elif t1<t0 and t1<t2 and t1<t3 and t1 < t4: # add a docked vesicle
                if n < M:
                    n=n+1
                tmin = t1
                timer-=tmin
                gammatimer-=tmin
                
            elif t2<t0 and t2<t1 and t2<t3 and t2 < t4: # remove a neurotransmitter
                if z > 0:
                    z=z-1
                tmin = t2
                timer-=tmin
                gammatimer-=tmin
                
            elif t3<t0 and t3<t1 and t3<t2 and t3<t4: # remove a repair vesicle
                if r>0:
                    r=r-1
                tmin = t3
                timer -= tmin
                gammatimer=gamma(shape, scale) # repair a site
                
            else:
                timer = delta_t
                tmin=timer
                gammatimer-=tmin
                if tcurr >= ratio*tmax:
                    nlist.append(n)
                    rlist.append(r)
                    zlist.append(z)
                    tlist.append(tcurr)
            
            tcurr += tmin
        #      0         1      2    3       4            5               6            7 8
        return tlist, nlist, rlist, zlist, APlist, np.mean(nlist), np.mean(zlist),\
            np.var(nlist)/np.mean(nlist), np.var(zlist)/np.mean(zlist)
            
def nacf(x, L):
    n = len(x)
    return np.sum(x[:n-L] * x[L:]) / np.sum(x**2)

f=10
pr=0.5 #
M=100
k=10 # 10 # feedback strength constant #
kr=1

gammaz=100 # d
cz=100 # number of neurotransmitters per vesicle

keq=5
CV=0.1

delta_t = 0.001
tmax = 1 # <-------------- TMAX, set to 200 for the FF calculation

n=M # occupied states
r=0 #  repair states
z=0 # neurotransmitters

res = simulate(f, pr, M, n, r, z, k, kr, gammaz, cz, tmax, delta_t)

